#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('paas:server');
const http = require('http');
const https = require('https');
const fs = require('fs');
const upgradeToWebSocket = require('../lib/WebSocket');
const express = require('express');
let server;
let httpServer;

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

if (process.env.SSL) { // If SSL enabled
  // Create HTTPS server
  server = https.createServer({
    key: fs.readFileSync(process.env.SSL_KEY_PATH),
    cert: fs.readFileSync(process.env.SSL_CERT_PATH),
    ca: fs.readFileSync(process.env.SSL_CA_PATH),
  }, app);
  server.listen(port, () => console.log(`HTTPS server listening: https://localhost`));

  // Create HTTP server for redirects
  const httpApp = express();
  httpApp.all('*', (req, res) => {
    console.log('http request, res.redirect')
    res.redirect('https://localhost' + ':' + port)
  });
  httpServer = http.createServer(httpApp);
  httpServer.listen(80, () => console.log(`HTTP server listening: http://localhost`));
} else { // If SSL NOT enabled
  server = http.createServer(app);
  server.listen(port);
}

/**
 * Handle websocket upgrades, pass to appropriate WebSocket Server
 */

server.on('upgrade', upgradeToWebSocket);

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
