<!-- Terminal -->
<div id="build-terminal" class="box terminal-wrapper" style="display: none">
  <details open="true">
    <summary>
      Build Process
      <progress
        class="progress is-small is-info"
        max="100"
        style="max-width: 300px;margin-left: auto;max-width: 150px;"
      ></progress>
    </summary>
    <pre class="terminal"></pre>
  </details>
</div>

<!-- App Info -->
<div class="box">
  <div class="content">
    <details open="true">
      <summary>Info</summary>
      <div class="content">
        <p>
          <strong>Title:</strong>
          {{ app.title }}
        </p>

        <p>
          <strong>URL:</strong>
          <a href="http://{{ app.url }}" target="_blank">
            {{ app.url }}
          </a>
        </p>

        <p>
          <strong>Health:</strong>
          <span class="tag" id="app-health"></span>
        </p>
      </div>
    </details>
  </div>
</div>

<!-- Deploy -->
<div class="box">
  <div class="content">
    <details open="true">
      <summary>Deploy</summary>
      <div class="content">
        <article class="message is-info">
          <div class="message-body">
            To deploy an app, attach a .zip file containing your app&rsquo;s
            source code and click 'Deploy' &ndash; we&rsquo;ll take care of the
            rest. Be sure that your zip file does not nest your app files
            in an extra directory.
          </div>
        </article>
      </div>
      <div class="content">
        <p>
          <form method="POST" action="/apps/{{app.id}}/deploy" enctype="multipart/form-data">
            <div class="field">
              <div class="file-js file is-small has-name">
                <label class="file-label">
                  <input class="file-input" type="file" name="file">

                  <span class="file-cta">
                    <span class="file-icon">
                      <i class="fas fa-upload"></i>
                    </span>

                    <span class="file-label">
                      Add .zip file of application...
                    </span>
                  </span>

                  <span class="file-name">
                    No file uploaded
                  </span>
                </label>
              </div>
            </div>

            <div class="field is-grouped">
              <p class="control flex-float-right">
                <button class="button is-link" type="submit">Deploy</button>
              </p>
            </div>
          </form>
        </p>
      </div>
    </details>
  </div>
</div>

<!-- App Database -->
<div class="box">
  <details>
    <summary>
      Database
      {{#if app.database}}
        <span class="tag is-rounded is-link is-light flex-float-right">Enabled</span>
      {{/if}}
    </summary>

    <div class="content">
      {{#if app.database}}
        <p>Your app is using the database <code>{{app.database.service_name}}</code>.</p>
        <p>
          Connection details have been set in your application in the environment
          variables <code>DATABASE_HOST</code>, <code>POSTGRES_DB</code>,
          <code>POSTGRES_USER</code>, <code>POSTGRES_PASSWORD</code>. Be sure to
          configure your application to use these environmeent variables to connect.
      {{else}}
        <article class="message is-link">
          <div class="message-body">
            <p>This application doesn't have a database. You can add a database below.</p>
            <p>
              Once a database has been added, environment variables are available in
              your application for <code>DB_NAME</code>, <code>DB_NAME</code>,
              <code>DB_NAME</code>, and <code>DB_NAME</code>. If you'd like, you can
              initialize your database by uploading a <code>schema.sql</code> file. Or,
              if you commands for setting up your database and running migrations, you
              can run them in the commands section below after adding a database.
            </p>
          </div>
        </article>

        <form method="POST" action="/apps/{{app.id}}/database" enctype="multipart/form-data">
          <div class="field">
            <div id="file-js-example" class="file is-small has-name">
              <label class="file-label">
                <input class="file-input" type="file" name="file">

                <span class="file-cta">
                  <span class="file-icon">
                    <i class="fas fa-upload"></i>
                  </span>

                  <span class="file-label">
                    Add schema.sql file (optional)...
                  </span>
                </span>

                <span class="file-name">
                  No file uploaded
                </span>
              </label>
            </div>
          </div>

          <div class="field">
            <button class="button is-link" type="submit">
             Add Database
            </button>
          </div>
      </form>
      {{/if}}
    </div>
  </details>
</div>

<!-- Command Runner -->
<div class="box">
  <details>
    <summary>Console</summary>

    <div class="content">
      <form id="exec-form">
        <p>
          Run a command in your app and view the output in a console (e.g.
          <code>rake db:migrate</code>). Interactive commands work too
          (e.g. <code>bash</code>). Please note that your command runs in
          a one-off container, so filesystem changes are not persistent.
        </p>
        <div class="field has-addons">
          <div class="control">
            <input id="command" class="input" type="text" name="command" placeholder="bash">
          </div>

          <div class="control">
            <button type="submit" class="button is-info">
              Run
            </button>
          </div>
        </div>
      </form>

      <div id="terminal-modal" class="modal">
        <div class="modal-background"></div>
        <section class="modal-content">
          <progress
            id="terminal-loading"
            class="progress is-large is-info"
            style="display: none"
            max="100"
          ></progress>
          <div id="terminal"></div>
        </section>
        <button class="modal-close is-large" aria-label="close"></button>
      </div>

    </div>
  </details>
</div>

<!-- Environment Variables -->
<div class="box">
  <details>
    <summary>Environment Variables
      {{#if app.envVariables.length}}
        <span class="tag is-rounded is-link is-light flex-float-right">{{ app.envVariables.length }}</span>
      {{/if}}
    </summary>

    <div class="content">
      <form method="POST" action="/apps/{{ app.id }}/env">
        <table>
          <tr>
            <th>Key</th>
            <th>Value</th>
            <th></th>
          </tr>
          {{#if app.envVariables.length}}
            {{#each app.envVariables }}
              <tr id="env-{{@index}}">
                <td>
                  <div class="field">
                    <div class="control">
                      <input class="input is-family-monospace" type="text" value="{{envKey this}}" name="{{@index}}[key]" />
                    </div>
                  </div>
                </td>
                <td>
                  <div class="field">
                    <div class="control">
                      <input class="input is-family-monospace" type="text" value="{{envVal this}}" name="{{@index}}[val]" />
                    </div>
                  </div>
                </td>
                <td>
                  <div class="form-list-action-container">
                    <a class="delete env" data-delete-id="#env-{{@index}}"></a>
                  </div>
                </td>
              </tr>
            {{/each}}
          {{/if}}
          <tr>
            <td>
              <div class="field">
                <div class="control">
                  <input class="input is-family-monospace" type="input" type="text" name="{{newEnvIndex app.envVariables}}[key]" />
                </div>
              </div>
            </td>
            <td>
              <div class="field">
                <div class="control">
                  <input class="input is-family-monospace" type="input" type="text" name="{{newEnvIndex app.envVariables}}[val]" />
                </div>
              </div>
            </td>
            <td></td>
          </tr>
        </table>

        <hr/>

        <div class="field is-grouped">
          <p class="control flex-float-right">
            <input class="button is-link" type="submit" value="Save" />
          </p>
        </div>
      </form>
    </div>
  </details>
</div>

<!-- Scaling -->
<div class="box">
  <details>
    <summary>Scaling</summary>

    <div class="content">
      <p>There are currently <strong>{{ app.replicas }}</strong> instance(s) of this app. You can scale the number of instances below.</p>
    </div>

    <div class="content">
      <form method="POST" action="/apps/{{ app.id }}/scale">
        <label>
          Instances: <input type="number" name="scale" value="{{ app.replicas }}" />
        </label>

        <input class="button is-link" type="submit" value="Update" />
      </form>
    </div>
  </details>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/xterm.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/addons/fit/fit.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/addons/attach/attach.js" integrity="sha256-5bwn4N3wNwa0EPpTwE8fJlb6yXRD6MH7r+H86hfFmI8=" crossorigin="anonymous"></script>
<script>
  // WebSocket for updating app health
  (() => {
    document.addEventListener('DOMContentLoaded', function() {
      const output = document.getElementById('app-health');
      const websocket = new WebSocket(
        `ws://${window.location.host}/app-health?appId={{app.id}}`
      );

      websocket.onopen = () => console.log('Connected to app-health');
      websocket.onerror = (event) => console.log(event.data);
      websocket.onclose = () => console.log('Disconnected from app-health');
      websocket.onmessage = (event) => {
        if (event.data === 'Healthy') {
          output.classList.add('is-success');
        } else {
          output.classList.add('is-danger');
        }
        output.innerHTML = event.data;
      }
    });
  })();

  // App console
  (() => {
    Terminal.applyAddon(attach);
    Terminal.applyAddon(fit);

    const terminalModal = document.getElementById('terminal-modal');
    const terminalModalBackground = document.querySelector('#terminal-modal .modal-background');
    const submitButton = document.querySelector('#exec-form .button');
    const progressBar = document.getElementById('terminal-loading');
    let term;
    let websocket;

    terminalModalBackground.addEventListener('click', function (event) {
      terminalModal.classList.remove('is-active');
      progressBar.style.display = "none";
      websocket.close();
      document.getElementById('terminal').innerHTML = '';
    });

    submitButton.addEventListener('click', function (event) {
      event.preventDefault();

      terminalModal.classList.add('is-active');
      const command = document.querySelector('#exec-form .input').value;
      document.querySelector('#exec-form .input').value = null;
      progressBar.style.display = "block";

      websocket = new WebSocket(
        `ws://localhost:3000/terminal?appTitle={{app.title}}&command=${command}`
      );

      term = new Terminal({ cursorBlink: true });

      websocket.onopen = () => {
        console.log('Connected to test');
      };
      websocket.onerror = (event) => console.log(event.data);
      websocket.onclose = () => {
        // TODO: hide cursor
        console.log('Disconnected from test')
      };
      websocket.onmessage = (event) => {
        // Data is sent back as a Blob, and Safari doesn't
        // support Blob.prototype.text(), so we wrapt it in
        // a response object and extract the text from that
        const response = new Response(event.data);
        response.text()
          .then((text) => {
            if (text === 'container ready') {
              progressBar.style.display = "none";
              term.open(document.getElementById('terminal'));
              term.focus();
              term.on('data', data => {
                websocket.send(data);
              });
            } else {
              term.write(text);
            }
          })
          .catch(console.log);
      }
    });
  })();

  // Handling build output
  (() => {
    // Update schema file upload field to reflect name of uploaded file
    const fileInput = document.querySelector('#file-js-example input[type=file]');
    if (fileInput) {
      fileInput.onchange = () => {
        if (fileInput.files.length > 0) {
          const fileName = document.querySelector('#file-js-example .file-name');
          fileName.textContent = fileInput.files[0].name;
        }
      }
    }
    // Build terminal
    const terminalWrapper = document.getElementById('build-terminal');
    const terminal = document.querySelector('#build-terminal .terminal');
    const url = new URL(document.location.href);
    const urlParams = new URLSearchParams(url.search);
    const showTerminal = urlParams.has('events');

    if (showTerminal) {
      const appEventEndpoint = new EventSource('/events/{{ app.id }}');

      const minimizeTerminal = () => {
        terminalWrapper.querySelector('details').removeAttribute('open');
      };

      const messageHandler = (event) => {
        if (event.lastEventId === '-1') {
          appEventEndpoint.close();
          terminalWrapper.classList.add('build-terminal-complete');
          minimizeTerminal();
          terminalWrapper
            .querySelector('summary')
            .innerHTML = '<span class="icon has-text-success"><i class="fas fa-check-circle"></i></span> Build complete!';
          return;
        }

        if (event.lastEventId === '-2') {
          appEventEndpoint.close();
          terminalWrapper.classList.add('build-terminal-failed');
          terminalWrapper
            .querySelector('summary')
            .innerHTML = '<span class="icon has-text-danger"><i class="fas fa-times-circle"></i></span> Build failed!';
          return;
        }

        // This only unhides the terminal _if_ we get a message from the server.
        if (terminalWrapper.style.display !== 'block') { terminalWrapper.style.display = 'block'; }

        const message = JSON.parse(event.data);

        terminal.innerHTML += message;
        terminal.scrollTop = terminal.scrollHeight;
      };

      const errorHandler = (error) => {
        appEventEndpoint.close();
      };

      appEventEndpoint.addEventListener('message', messageHandler);
      appEventEndpoint.addEventListener('error', errorHandler);
    }
  })();
</script>
