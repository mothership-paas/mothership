<div class="columns is-centered terminal-wrapper" style="display: none">
  <div class="column is-three-quarters">
    <details open="true">
      <summary>Build Process</summary>
      <pre class="terminal"></pre>
    </details>
  </div>
</div>

<div class="columns is-centered">
  <div class="column is-three-quarters">

    <div class="box">
      <div class="content">
        <p>
          <strong>Title:</strong>
          {{ app.title }}
        </p>

        <p>
          <strong>IP Address:</strong>
          <a href="http://{{ app.ipAddress }}" target="_blank">
            {{ app.ipAddress }}
          </a>

        </p>

        <p>
          Add a database:
          <form method="POST" action="/apps/{{ app.id }}/database" enctype="multipart/form-data">
            
            <label>
              Schema: <input type="file" name="file" />
            </label>

            <input class="button is-link" type="submit" value="Add Database" />
          </form>
        </p>
      </div>

      <a href='' class='button is-link'>Edit</a>
      <a href='/apps' class='button'>Back</a>
    </div>
  </div>
</div>

<script>
(() => {
  const terminalWrapper = document.querySelector('.terminal-wrapper');
  const terminal = document.querySelector('.terminal');
  const url = new URL(document.location.href);
  const urlParams = new URLSearchParams(url.search);
  const showTerminal = urlParams.has('events');

  if (showTerminal) {
    const appEventEndpoint = new EventSource('/events/{{ app.id }}');

    const minimizeTerminal = () => {
      terminalWrapper.querySelector('details').removeAttribute('open');
      terminalWrapper.querySelector('summary').innerHTML = 'Build Complete';
    };

    const messageHandler = (event) => {
      if (event.lastEventId === '-1') {
        appEventEndpoint.close();
        minimizeTerminal();
        return;
      }

      // This only unhides the terminal _if_ we get a message from the server.
      if (terminalWrapper.style.display !== 'flex') { terminalWrapper.style.display = 'flex'; }

      const message = JSON.parse(event.data);

      terminal.innerHTML += message;
      terminal.scrollTop = terminal.scrollHeight;
    };

    const errorHandler = (error) => {
      appEventEndpoint.close();
    };

    appEventEndpoint.addEventListener('message', messageHandler);
    appEventEndpoint.addEventListener('error', errorHandler);
  }
})();
</script>