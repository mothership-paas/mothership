<!-- Terminal -->
<div id="build-terminal" class="box terminal-wrapper" style="display: none">
  <details open="true">
    <summary>
      Build Process
      <progress
        class="progress is-small is-info"
        max="100"
        style="max-width: 300px;margin-left: auto;max-width: 150px;"
      ></progress>
    </summary>
    <pre class="terminal"></pre>
  </details>
</div>

<!-- App Info -->
<div class="box">
  <div class="content">
    <details open="true">
      <summary>Info</summary>
      <div class="content">
        <p>
          <strong>Title:</strong>
          {{ app.title }}
        </p>

        <p>
          <strong>URL:</strong>
          <a href="http://{{ app.url }}" target="_blank">
            {{ app.url }}
          </a>

        </p>
      </div>
    </details>
  </div>
</div>

<!-- App Database -->
<div class="box">
  <details>
    <summary>Database</summary>

    <div class="content">
      {{#if app.database}}
        <p>Your app is using the database <code>{{app.database.service_name}}</code>.</p>
        <p>
          Connection details have been set in your application in the environment
          variables <code>DATABASE_HOST</code>, <code>POSTGRES_DB</code>,
          <code>POSTGRES_USER</code>, <code>POSTGRES_PASSWORD</code>. Be sure to
          configure your application to use these environmeent variables to connect.
      {{else}}
        <article class="message is-link">
          <div class="message-body">
            <p>This application doesn't have a database. You can add a database below.</p>
            <p>
              Once a database has been added, environment variables are available in
              your application for <code>DB_NAME</code>, <code>DB_NAME</code>,
              <code>DB_NAME</code>, and <code>DB_NAME</code>. If you'd like, you can
              initialize your database by uploading a <code>schema.sql</code> file. Or,
              if you commands for setting up your database and running migrations, you
              can run them in the commands section below after adding a database.
            </p>
          </div>
        </article>

        <form method="POST" action="/apps/{{app.id}}/database" enctype="multipart/form-data">
          <div class="field">
            <div id="file-js-example" class="file is-small has-name">
              <label class="file-label">
                <input class="file-input" type="file" name="file">

                <span class="file-cta">
                  <span class="file-icon">
                    <i class="fas fa-upload"></i>
                  </span>

                  <span class="file-label">
                    Add schema.sql file (optional)...
                  </span>
                </span>

                <span class="file-name">
                  No file uploaded
                </span>
              </label>
            </div>
          </div>

          <div class="field">
            <button class="button is-link" type="submit">
             Add Database
            </button>
          </div>
      </form>
      {{/if}}
    </div>
  </details>
</div>

<!-- Command Runner -->
<div class="box">
  <details>
    <summary>Run Commands</summary>

    <div class="content">
      <p>
        Run command in {{app.title}} app:
        <form id="exec-form">

          <div class="field has-addons">
            <div class="control">
              <input id="command" class="input" type="text" name="command" placeholder="bundle install">
            </div>

            <div class="control">
              <button type="submit" class="button is-info">
                Run
              </button>
            </div>
          </div>
        </form>
      </p>

      <div id="exec-terminal" class="terminal-wrapper" style="display: none">
        <details open="true">
          <pre class="terminal"></pre>
        </details>
      </div>
    </div>
  </details>
</div>

<!-- Environment Variables -->
<div class="box">
  <details>
    <summary>Environment Variables
      {{#if app.envVariables.length}}
        <span class="tag is-rounded is-link is-light flex-float-right">{{ app.envVariables.length }}</span>
      {{/if}}
    </summary>

    <div class="content">
      <form method="POST" action="/apps/{{ app.id }}/env">
        <table>
          <tr>
            <th>Key</th>
            <th>Value</th>
            <th></th>
          </tr>
          {{#if app.envVariables.length}}
            {{#each app.envVariables }}
              <tr id="env-{{@index}}">
                <td>
                  <div class="field">
                    <div class="control">
                      <input class="input is-family-monospace" type="text" value="{{envKey this}}" name="{{@index}}[key]" />
                    </div>
                  </div>
                </td>
                <td>
                  <div class="field">
                    <div class="control">
                      <input class="input is-family-monospace" type="text" value="{{envVal this}}" name="{{@index}}[val]" />
                    </div>
                  </div>
                </td>
                <td>
                  <div class="form-list-action-container">
                    <a class="delete env" data-delete-id="#env-{{@index}}"></a>
                  </div>
                </td>
              </tr>
            {{/each}}
          {{/if}}
          <tr>
            <td>
              <div class="field">
                <div class="control">
                  <input class="input is-family-monospace" type="input" type="text" name="{{app.envVariables.length}}[key]" />
                </div>
              </div>
            </td>
            <td>
              <div class="field">
                <div class="control">
                  <input class="input is-family-monospace" type="input" type="text" name="{{app.envVariables.length}}[val]" />
                </div>
              </div>
            </td>
            <td></td>
          </tr>
        </table>

        <hr/>

        <div class="field is-grouped">
          <p class="control flex-float-right">
            <input class="button is-link" type="submit" value="Save" />
          </p>
        </div>
      </form>
    </div>
  </details>
</div>

<!-- Scaling -->
<div class="box">
  <details>
    <summary>Scaling</summary>

    <div class="content">
      <p>There are currently <strong>{{ app.replicas }}</strong> instance(s) of this app. You can scale the number of instances below.</p>
    </div>

    <div class="content">

      <form method="POST" action="/apps/{{ app.id }}/scale">
        <label>
          Instances: <input type="number" name="scale" value="{{ app.replicas }}" />
        </label>

        <input class="button is-link" type="submit" value="Update" />
      </form>
    </div>
  </details>
</div>

<script>
  (() => {
    // Update schema file upload field to reflect name of uploaded file
    const fileInput = document.querySelector('#file-js-example input[type=file]');
    if (fileInput) {
      fileInput.onchange = () => {
        if (fileInput.files.length > 0) {
          const fileName = document.querySelector('#file-js-example .file-name');
          fileName.textContent = fileInput.files[0].name;
        }
      }
    }
    // Build terminal
    const terminalWrapper = document.getElementById('build-terminal');
    const terminal = document.querySelector('#build-terminal .terminal');
    const url = new URL(document.location.href);
    const urlParams = new URLSearchParams(url.search);
    const showTerminal = urlParams.has('events');

    if (showTerminal) {
      const appEventEndpoint = new EventSource('/events/{{ app.id }}');

      const minimizeTerminal = () => {
        terminalWrapper.querySelector('details').removeAttribute('open');
      };

      const messageHandler = (event) => {
        if (event.lastEventId === '-1') {
          appEventEndpoint.close();
          terminalWrapper.classList.add('build-terminal-complete');
          minimizeTerminal();
          terminalWrapper
            .querySelector('summary')
            .innerHTML = '<span class="icon has-text-success"><i class="fas fa-check-circle"></i></span> Build complete!';
          return;
        }

        if (event.lastEventId === '-2') {
          appEventEndpoint.close();
          terminalWrapper.classList.add('build-terminal-failed');
          terminalWrapper
            .querySelector('summary')
            .innerHTML = '<span class="icon has-text-danger"><i class="fas fa-times-circle"></i></span> Build failed!';
          return;
        }

        // This only unhides the terminal _if_ we get a message from the server.
        if (terminalWrapper.style.display !== 'block') { terminalWrapper.style.display = 'block'; }

        const message = JSON.parse(event.data);

        terminal.innerHTML += message;
        terminal.scrollTop = terminal.scrollHeight;
      };

      const errorHandler = (error) => {
        appEventEndpoint.close();
      };

      appEventEndpoint.addEventListener('message', messageHandler);
      appEventEndpoint.addEventListener('error', errorHandler);
    }

    // Exec Terminal
    const execForm = document.getElementById('exec-form');
    const submitButton = document.querySelector('#exec-form .button');

    submitButton.addEventListener('click', function (event) {
      event.preventDefault();

      const command = document.querySelector('#exec-form .input').value;
      const execTerminalWrapper = document.getElementById('exec-terminal');
      const appEventEndpoint = new EventSource('/events/{{ app.id }}/exec');

      fetch('/apps/{{ app.id }}/exec', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: 'command=' + encodeURIComponent(command),
      })

      execTerminalWrapper.style.display = 'block';
      const execTerminal = document.querySelector('#exec-terminal .terminal');

      appEventEndpoint.addEventListener('message', function (message) {
        if (event.lastEventId === '-1') {
          appEventEndpoint.close();
          execTerminal.style.display = 'none';
          console.log('stopped listening');
          return;
        }
        message = JSON.parse(message.data);
        message = message.join('\n');
        console.log(message);
        execTerminal.innerHTML = message;
        execTerminal.scrollTop = execTerminal.scrollHeight;
      });

    });

    // Env Variables

    let removeEnvVariable = (evt) => {
      evt.stopPropagation();
      const elementId = evt.target.getAttribute('data-delete-id');
      const element = document.querySelector(elementId);
      element.parentNode.removeChild(element);
    }

    const deleteEnvButtons = document.querySelectorAll(".delete.env");
    for (const button of deleteEnvButtons) {
      button.addEventListener('click', removeEnvVariable);
    }
  })();
</script>
